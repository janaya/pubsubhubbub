<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!--
  For editting this, see:

  http://xml.resource.org/public/rfc/html/rfc2629.html

  In a nutshell,

  $ sudo apt-get install xml2rfc
  $ xml2rfc pubsubhubbub-core-0.1.xml pubsubhubbub-core-0.1.html

-->
<rfc category="info" docName="pubsubhubbub-core-0.1.xml" ipr="full3978">
  <?rfc toc="yes" ?>

  <?rfc tocdepth="2" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc strict="yes" ?>

  <?rfc iprnotified="no" ?>

  <?rfc private="Draft" ?>

  <front>
    <title>PubSubHubbub Core 0.1 -- Working Draft</title>

    <author fullname="Brad Fitzpatrick" initials="B." surname="Fitzpatrick">
      <organization>Google, Inc</organization>

      <address>
        <email>brad@danga.com</email>
      </address>
    </author>

    <author fullname="Brett Slatkin" initials="B." surname="Slatkin">
      <organization>Google, Inc</organization>

      <address>
        <email>bslatkin@gmail.com</email>
      </address>
    </author>

    <author fullname="Martin Atkins" initials="M." surname="Atkins">
      <organization>Six Apart Ltd.</organization>

      <address>
        <email>mart@degeneration.co.uk</email>
      </address>
    </author>

    <date day="13" month="April" year="2009" />

    <abstract>
      <t>An open, simple web-scale pubsub protocol, along with an open source
      reference implentation targetting Google App Engine. Notably, however,
      nothing in the protocol is centralized, or Google- or App
      Engine-specific. Anybody can play.</t>

      <t>As opposed to more developed (and more complex) pubsub specs like
      XEP-0060 (Jabber Publish-Subscribe) this spec's base profile (the
      barrier-to-entry to speak it) is dead simple. The fancy bits required for
      high-volume publishers and subscribers are optional. The base profile is
      HTTP-based, as opposed to XMPP (see more on this below).</t>

      <t>To dramatically simplify the spec in several places where we had to
      choose between supporting A or B, we took it upon ourselves to say "only
      A", rather than making it an implementation decision.</t>

      <t>We offer this spec in hopes that it fills a need or at least advances
      the state of the discussion in the pubsub space. Polling sucks. We think
      a decentralized pubsub layer is a fundamental, missing layer in the
      Internet architecture today and its existence, more than just enabling
      the obvious lower latency feed readers, would enable many cool
      applications, most of which we can't even imagine. But we're looking
      forward to decentralized social networking.</t>
    </abstract>
  </front>

  <middle>
    <section title="Notation and Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>. Domain name examples use <xref
      target="RFC2606"></xref>.</t>
    </section>

    <section title="Definitions">
      <t><list style="hanging">
          <t hangText="Topic:">An <xref target="RFC4287">Atom</xref> feed URL.
          The unit to which one can subscribe to changes. <xref
          target="RSS20">RSS</xref> isn't supported for simplicity. Further, the
          spec currently only addresses public (unauthenticated) Atom feed
          URLs.</t>

          <t hangText="Pubsub Hub (&quot;the hub&quot;):">The server (URL) which
          implements both sides of this protocol. We have implemented this and
          are running a server at <eref
          target="http://pubsubhubbub.appspot.com/">
          http://pubsubhubbub.appspot.com</eref> that's at least for now open
          for anybody to use, as either a publisher or subscriber. Any hub is
          free to implement its own policies on who can use it.</t>

          <t hangText="Publisher:">An owner of a topic. Notifies the pubsub hub
          when the topic (Atom feed) has been updated. It just notifies that it
          <spanx style="emph">has</spanx> been updated, but not how. As in
          almost all pubsub systems, the publisher is unaware of the
          subscribers, if any. Other pubsub systems might call the publisher the
          "source".</t>

          <t hangText="Subscriber:">An entity (person or program) that wants
          to be notified of changes on a topic. The subscriber must be
          directly network-accessible and is identified by its Subscriber
          Callback URL.</t>

          <t hangText="Subscription:">A unique relation to a topic by a
          subscriber that indicates it should receive updates for that topic. A
          subscription's unique key is the tuple (Topic URL, Subscriber Callback
          URL). Subscriptions may (at the hub's decision) have expiration times
          akin to DHCP leases which must be periodically renewed.</t>

          <t hangText="Subscriber Callback URL:">The URL at which a subscriber
          wishes to receive notifications.</t>

          <t hangText="Event:">An event that's visible to multiple topics. For
          each event that happens (e.g. "Brad posted to the Linux Community."),
          multiple topics could be affected (e.g. "Brad posted." and "Linux
          community has new post"). Publisher events cause topics to be updated
          and the hub looks up all subscriptions for affected topics, sending
          out notifications to subscribers.</t>

          <t hangText="Notification:">A payload describing how a topic's
          contents have changed. This difference (or "delta") is computed by the
          hub and sent to all subscribers. The format of the notification will
          be an Atom feed served by the publisher with only new entries present.
          The notification can be the result of a publisher telling the hub of
          an update, or the hub proactively polling a topic feed, perhaps for a
          subscriber subscribing to a topic that's not pubsub-aware. Note also
          that a notification to a subscriber can be a payload consisting of
          updates for multiple topics. Publishers MAY choose to send multi-topic
          notifications as an optimization for heavy subscribers, but
          subscribers MUST understand them. See <xref
          target="contentdistribution" /> for format details.</t>
        </list></t>
    </section>

    <section title="High-level protocol flow">
      <t>(This section is non-normative.)</t>

      <t><list style="symbols">
          <t>Publishers POST a ping to their hub(s) URLs when their topic(s)
          change.</t>

          <t>Subscribers POST to one or more of the advertised hubs for a
          topic they're interested in. Alternatively, some hubs may offer
          auto-polling capability, to let {their,any} subscribers subscribe to
          topics which don't advertise a hub.</t>

          <t>The hub caches minimal metadata (id, data, entry digest) about
          each topic's previous state. When the hub re-fetches a topic feed (on
          its own initiative or as a result of a publisher's ping) and finds a
          delta, it enqueues a notification to all registered subscribers.</t>
        </list></t>
    </section>

    <section title="Atom Details">
      <t>Notification and source formats will be Atom. Explanation detail follows
      this example.</t>

      <figure>
        <artwork><![CDATA[<?xml version="1.0"?>
<atom:feed>
  <!-- Normally here would be source, title, etc ... -->

  <link rel="hub" href="http://myhub.example.com/endpoint" />
  <link rel="self" href="http://publisher.example.com/happycats.xml" />
  <updated>2008-08-11T02:15:01Z</updated>

  <!-- Example of a full entry. -->
  <entry>
    <title>Heathcliff</title>
    <link href="http://publisher.example.com/happycat25.xml" />
    <id>http://publisher.example.com/happycat25.xml</id>
    <updated>2008-08-11T02:15:01Z</updated>
    <content>
      What a happy cat. Full content goes here.
    </content>
  </entry>

  <!-- Example of an entity that isn't full/is truncated. This is implied
       by the lack of a <content> element and a <summary> element instead. -->
  <entry >
    <title>Heathcliff</title>
    <link href="http://publisher.example.com/happycat25.xml" />
    <id>http://publisher.example.com/happycat25.xml</id>
    <updated>2008-08-11T02:15:01Z</updated>
    <summary>
      What a happy cat!
    </summary>
  </entry>
  
  <!-- Meta-data only; implied by the lack of <content> and
       <summary> elements. -->
  <entry>
    <title>Garfield</title>
    <link rel="alternate" href="http://publisher.example.com/happycat24.xml" />
    <id>http://publisher.example.com/happycat25.xml</id>
    <updated>2008-08-11T02:15:01Z</updated>
  </entry>

  <!-- Context entry that's meta-data only and not new. Implied because the
       update time on this entry is before the //atom:feed/updated time. -->
  <entry>
    <title>Nermal</title>
    <link rel="alternate" href="http://publisher.example.com/happycat23s.xml" />
    <id>http://publisher.example.com/happycat25.xml</id>
    <updated>2008-07-10T12:28:13Z</updated>
  </entry>

</atom:feed>
]]></artwork>
      </figure>

      <t>The Publisher makes the decision as to include full body, truncated
      body, or meta data of most recent event(s). One of:</t>

      <t><list style="symbols">
          <t>URL + metadata</t>

          <t>URL + metadata + truncated</t>

          <t>URL + metadata + full</t>
        </list></t>

      <t>The trade-off between including all content in outgoing notifications
      or having the thundering herd (by clients who fetch the <spanx
      style="verb">//atom:feed/entry/link</spanx> in response to a notification)
      is up to the publisher.</t>

      <t>Entries of most recent N events (for recipient to know whether or not
      they'd missed any recent items-- like TCP SACK) MAY be provided as
      context. This is implied by the difference between the <spanx
      style="verb">//atom:feed/updated</spanx> field and the <spanx
      style="verb">//atom:feed/entry/updated</spanx> fields.</t>

      <t>The <spanx style="verb">//atom:feed/link[@rel="self"]</spanx> element
      will indicate the original URL for the entire event stream with no
      truncation (if available).</t>
    </section>

    <section anchor="discovery" title="Discovery">
      <t>A potential subscriber initiates discovery by retrieving the Atom feed
      to which it wants to subscribe. A feed that acts as a topic as per this
      specification MUST publish, as a child of <spanx
      style="verb">atom:feed</spanx>, an <spanx style="verb">atom:link</spanx>
      element whose <spanx style="verb">rel</spanx> attribute has the value
      "hub" and whose <spanx style="verb">href</spanx> attribute contains the
      hub's endpoint URL. When a potential subscriber encounters such a link,
      that subscriber MAY subscribe to the feed as described in <xref
      target="subscribing"></xref>.</t>

      <t>Example:</t>

      <figure>
 <artwork><![CDATA[<?xml version="1.0"?>
<atom:feed>
  <!-- Normally here would be source, title, etc ... -->
  <link rel="hub" href="http://myhub.example.com/endpoint" />
  <link rel="self" href="http://publisher.example.com/topic.xml" />
  ....
  <entry>
     ....
  </entry>
  <entry>
     ....
  </entry>
</atom:feed>
]]></artwork></figure>

     </section>

    <section anchor="subscribing" title="Subscribing and Unsubscribing">
      <t>Subscribing to a topic URL consists of two parts that may occur
      immediately in sequence or have a delay.</t>
      <t><list style="symbols">
          <t>Requesting a subscription using the hub</t>
          <t>Confirming the subscription was actually desired</t>
        </list></t>
      
      <t>Unsubscribing works in the same way, except with a single parameter
      changed to indicate the desire to unsubscribe.</t>

      <section title="Subscriber Sends Subscription Request">
        <t>Subscription is initiated by the subscriber making an HTTP POST
        request to the Hub URL. This request has a Content-type of <spanx
        style="verb">application/x-www-form-urlencoded</spanx> (described in
        Section 17.13.4 of <xref target="W3C.REC-html401-19991224"/>) and the
        following parameters in its body:</t>

        <t><list style="hanging">
            <t hangText="hub.mode">REQUIRED. The literal string "subscribe" or
            "unsubscribe", depending on the goal of the request.</t>

            <t hangText="hub.callback">REQUIRED. The subscriber's callback
            URL.</t>

            <t hangText="hub.topic">REQUIRED. The topic URL that the
            subscriber wishes to subscribe to.</t>

            <t hangText="hub.verify">REQUIRED. Comma-separated list of
            keywords describing verification modes supported by this
            subscriber, as described below.</t>

            <t hangText="hub.verify_token">A subscriber-provided opaque token
            that will be echoed back in the verification request to assist the
            subscriber in identifying which subscription request is being
            verified. If this is not included, no token will be included in
            the verification request.</t>
          </list></t>

        <t>The following keywords are supported for hub.verify:</t>

        <t><list style="hanging">
            <t hangText="sync">The subscriber supports synchronous
            verification, where the verification request must occur before the
            subscription request's HTTP response is returned.</t>

            <t hangText="async">The subscriber supports asynchronous
            verification, where the verification request may occur at a later
            point after the subscription request has returned.</t>
          </list></t>

        <t>Where multiple keywords are used, their order indicates the
        subscriber's order of preference. Hubs MUST ignore verify mode
        keywords that they do not understand. Subscribers MUST use at least
        one of the modes indicated in the list above, but MAY include
        additional keywords defined by extension specifications.</t>

        <t>The hub MUST respond to a subscription request with an HTTP 204 "No
        Content" response to indicate that the request was already verified and
        that the subscription has been created. If the subscription has yet to
        be verified (i.e., the hub is using asynchronous verification), the hub
        MUST respond with a 202 "Accepted" response. In the case of any error,
        an appropriate HTTP error response code (4xx or 5xx) MUST be
        returned.</t>

        <t>In synchronous mode, the verification (<xref
        target="verifysub"></xref>) MUST be completed before the hub returns a
        response. In asynchronous mode, the verification MAY be deferred until a
        later time. This is useful to enable hubs to defer work; this could
        allow them to alleviate servers under heavy load or do verification work
        in batches.</t>
      </section>

      <section anchor="verifysub" title="Hub Verifies Intent of the Subscriber">
        <t>In order to prevent an attacker from creating unwanted subscriptions
        on behalf of a subscriber (or unsubscribing desired ones), a hub must
        ensure that the subscriber did indeed send the subscription request.</t>

        <t>The hub verifies a subscription request by sending an HTTP GET
        request to the subscriber's callback URL as given in the subscription
        request. This request has the following query string arguments appended
        (format described in Section 17.13.4 of <xref
        target="W3C.REC-html401-19991224"/>):</t>

        <t><list style="hanging">
            <t hangText="hub.mode">REQUIRED. The literal string "subscribe" or
            "unsubscribe", which matches the original request to the hub from
            the subscriber.</t>

            <t hangText="hub.topic">REQUIRED. The topic URL given in the
            corresponding subscription request.</t>

            <t hangText="hub.verify_token">The subscriber-provided opaque
            token from the corresponding subscription request, if one was
            provided.</t>
          </list></t>

        <t>The subscriber MUST confirm that the topic and verify_token
        correspond to a pending subscription or unsubscription that it wishes to
        carry out. If so, the subscriber MUST respond with an HTTP success (2xx)
        response. If not, the subscriber MUST respond with a 404 "Not Found"
        response. The hub MUST consider other client and server error response
        codes (4xx and 5xx) to mean that the subscription is <spanx
        style="emph">not</spanx> verified.</t>

      </section>
    </section>

    <section anchor="publishing" title="Publishing">
      <t>A publisher pings the hub with the topic URL(s) which have been updated
      and the hub schedules those topics to be fetched and delivered. Because
      it's just a ping to notify the hub of the topic URL (without a payload),
      no authentication from the publisher is required.</t>

      <section title="New Content Notification">
        <t>When new content is added to a feed, a notification is sent from to
        the hub by the publisher. The notification request is a POST request to
        the hub URL. This request has a Content-type of <spanx
        style="verb">application/x-www-form-urlencoded</spanx> (described in
        Section 17.13.4 of <xref target="W3C.REC-html401-19991224"/>) and the
        following parameters in its body:</t>

        <t><list style="hanging">
            <t hangText="hub.mode">REQUIRED. The literal string "publish".</t>

            <t hangText="hub.url">REQUIRED. The topic URL of the topic that
            has been updated. This field may be repeated to indicate multiple
            topics that have been updated.</t>
          </list></t>

        <t>The new content notification is a signal to the hub that there is
        new content available. The hub SHOULD arrange for a content fetch
        request (<xref target="contentfetch"></xref>) to be performed in the
        near future to retrieve the new content. If the publication request
        was accepted, the hub MUST return a 202 Accepted response. If the
        publication request is not accepted for some reason, the hub MUST
        return an appropriate HTTP error response code (4xx and 5xx).</t>
      </section>

      <section anchor="contentfetch" title="Content Fetch">
        <t>When the hub wishes to retrieve new content for a topic, the hub
        sends an HTTP GET request to the topic URL. The request SHOULD include a
        header field <spanx style="verb">X-Hub-Subscribers</spanx> whose value
        is an integer number, possibly approximate, of subscribers on behalf of
        which the feed is being fetched.</t>
      </section>

      <section anchor="contentdistribution" title="Content Distribution">
        <t>If, after a content fetch, the hub determines that the topic feed
        content has changed, the hub sends information about the changes to each
        of the subscribers to the topic. A content distribution request is an
        HTTP POST request from hub to the subscriber's callback URL. This
        request has a Content-Type of <spanx
        style="verb">application/atom+xml</spanx> and its body is a list of
        changed items expressed as an Atom feed.</t>

        <t>The request body is an Atom feed document. If the document represents
        a single feed being replicated for the subscriber, then the feed-level
        elements SHOULD be preserved aside from entry elements. However, the
        <spanx style="verb">atom:id</spanx> element MUST be reproduced exactly.
        The other <spanx style="verb">atom:updated</spanx> and <spanx
        style="verb">atom:title</spanx> elements required by the Atom
        specification SHOULD be present. Each entry element in the feed contains
        the content from an entry in the single topic that the subscriber has an
        active subscription for.</t>

        <t>When the notification document represents an aggregated set of feeds,
        the hub SHOULD reproduce all of the elements from the source feed <spanx
        style="emph">inside</spanx> the corresponding entry in the content
        distribution request. However, the <spanx style="verb">atom:id</spanx>
        value MUST be reproduced exactly. If the source entry does not have an
        <spanx style="verb">atom:source</spanx> element, the hub MUST create an
        <spanx style="verb">atom:source</spanx> element containing the <spanx
        style="verb">atom:id</spanx> element. The hub SHOULD also include the
        <spanx style="verb">atom:title</spanx> element and an <spanx
        style="verb">atom:link</spanx> element with <spanx
        style="verb">rel</spanx> "self" whose values are functionally equivalent
        to the corresponding elements in the topic feed.</t>
        
        <t>TODO: Add example of aggregated feed.</t>
      </section>
    </section>
  </middle>

  <back>
    <references title="References">
      <reference anchor="RFC2606">
        <front>
          <title>Reserved Top Level DNS Names</title>

          <author fullname="D. Eastlake" initials="D.E" surname="Eastlake">
            <organization />
          </author>

          <author fullname="A. Panitz" initials="A.P" surname="Panitz">
            <organization />
          </author>
        </front>

        <seriesInfo name="RFC" value="2606" />
      </reference>

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement
          Levels</title>

          <author fullname="Scott Bradner" initials="B.S" surname="Bradner">
            <organization>Alis Technologies</organization>
          </author>
        </front>

        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="RFC2616">
        <front>
          <title>Hypertext Transfer Protocol -- HTTP/1.1</title>

          <author fullname="R. Fielding" initials="R.F" surname="Fielding">
            <organization>UC Irvine</organization>
          </author>

          <author fullname="J. Gettys" initials="J.G" surname="Gettys">
            <organization>Compaq/W3C</organization>
          </author>

          <author fullname="J. Mogul" initials="J.M" surname="Mogul">
            <organization>Compaq</organization>
          </author>

          <author fullname="H. Frystyk" initials="H.F" surname="Frystyk">
            <organization>W3C/MIT</organization>
          </author>

          <author fullname="L. Masinter" initials="L.M" surname="Masinter">
            <organization>Xerox</organization>
          </author>

          <author fullname="P. Leach" initials="P.L" surname="Leach">
            <organization>Microsoft</organization>
          </author>

          <author fullname="T. Berners-Lee" initials="T.L"
                  surname="Berners-Lee">
            <organization>W3C/MIT</organization>
          </author>
        </front>

        <seriesInfo name="RFC" value="2616" />
      </reference>

      <reference anchor="RFC2617">
        <front>
          <title>HTTP Authentication: Basic and Digest Access
          Authentication</title>

          <author fullname="J. Franks" initials="J.F" surname="Franks">
            <organization />
          </author>

          <author fullname="P. Hallam-Baker" initials="P.HB"
                  surname="Hallam-Baker">
            <organization />
          </author>

          <author fullname="J. Hostetler" initials="J.H" surname="Hostetler">
            <organization />
          </author>

          <author fullname="S. Lawrence" initials="S.L" surname="Lawrence">
            <organization />
          </author>

          <author fullname="P. Leach" initials="P.L" surname="Leach">
            <organization />
          </author>

          <author fullname="A. Luotonen" initials="A.L" surname="Luotonen">
            <organization />
          </author>

          <author fullname="L. Stewart" initials="L.S" surname="Stewart">
            <organization />
          </author>
        </front>

        <seriesInfo name="RFC" value="2617" />
      </reference>

      <reference anchor="RFC3629">
        <front>
          <title>UTF-8, a transformation format of Unicode and ISO
          10646</title>

          <author fullname="Francois Yergeau" initials="F.Y" surname="Yergeau">
            <organization />
          </author>
        </front>

        <seriesInfo name="RFC" value="3629" />
      </reference>

      <reference anchor="RFC3986">
        <front>
          <title>Uniform Resource Identifiers (URI): Generic Syntax</title>

          <author fullname="T. Berners-Lee" initials="T.L"
                  surname="Berners-Lee">
            <organization />
          </author>
        </front>

        <seriesInfo name="RFC" value="3986" />
      </reference>

      <reference anchor="RFC2045">
        <front>
          <title>Multipurpose Internet Mail Extensions (MIME) Part One: Format
          of Internet Message Bodies</title>

          <author fullname="N. Freed" initials="N.F" surname="Freed">
            <organization>Innosoft</organization>
          </author>

          <author fullname="N. Borenstein" initials="N.B" surname="Borenstein">
            <organization>First Virtual</organization>
          </author>
        </front>

        <seriesInfo name="RFC" value="2045" />
      </reference>

      <reference anchor='RFC4287'>
        <front>
          <title abbrev='Atom Format'>The Atom Syndication Format</title>
          
          <author initials='M.' surname='Nottingham' fullname='Mark Nottingham' role='editor'>
            <organization />
          </author>

          <author initials='R.' surname='Sayre' fullname='Robert Sayre' role='editor'>
            <organization />
          </author>
        </front>

        <seriesInfo name='RFC' value='4287' />
        <format type='HTML' octets='150786' target='http://xml.resource.org/public/rfc/html/rfc4287.html' />
      </reference>

      <reference anchor='W3C.REC-html401-19991224'
                 target='http://www.w3.org/TR/1999/REC-html401-19991224'>
        <front>
          <title>HTML 4.01 Specification</title>

          <author initials='D.' surname='Raggett' fullname='David Raggett'>
            <organization />
          </author>

          <author initials='A.' surname='Hors' fullname='Arnaud Le Hors'>
            <organization />
          </author>

          <author initials='I.' surname='Jacobs' fullname='Ian Jacobs'>
            <organization />
          </author>
          <date month='December' day='24' year='1999' />
        </front>

        <seriesInfo name='World Wide Web Consortium Recommendation' value='REC-html401-19991224' />
        <format type='HTML' target='http://www.w3.org/TR/1999/REC-html401-19991224' />
      </reference>

      <reference anchor="XEP-0060">
        <front>
          <title>Publish-Subscribe</title>
          <author initials="P." surname="Millard" fullname="Peter Millard">
            <organization/>
          </author>
          <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
            <organization/>
          </author>
          <author initials="R." surname="Meijer" fullname="Ralph Meijer">
            <organization/>
          </author>
        </front>
        <seriesInfo name="XSF XEP" value="0060"/>
        <format type="HTML" target="http://www.xmpp.org/extensions/xep-0060.html"/>
      </reference>

      <reference anchor="RSS20">
        <front>
          <title>RSS 2.0</title>
          <author initials="D." surname="Winer" fullname="Dave Winer">
            <organization />
          </author>
        </front>
        <format type="HTML" target="http://cyber.law.harvard.edu/rss/rss.html"/>
      </reference>

    </references>

    <section title="Specification Feedback">
      <t>Feedback on this specification is welcomed via the
      pubsubhubbub mailing list, pubsubhubbub@googlegroups.com.  For
      more information, see <eref
      target="http://groups.google.com/group/pubsubhubbub">the
      PubSubHubbub group on Google Groups</eref>.  Also, check out the
      <eref
      target="http://moderator.appspot.com/#15/e=43e1a&t=426ac">FAQ</eref>
      and <eref target="http://code.google.com/p/pubsubhubbub/">other
      documentation</eref>.
      </t>

     </section>
   </back>
</rfc>
